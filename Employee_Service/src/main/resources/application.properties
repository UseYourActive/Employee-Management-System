spring.application.name=EMPLOYEE-SERVICE
#server.port=8081

#spring.datasource.url=jdbc:postgresql://localhost:5432/Employee_Service?createDatabaseIfNotExist=true
#spring.datasource.username=postgres
#spring.datasource.password=!QkaParolka123

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true

management.endpoints.web.exposure.include=*
#springdoc.api-docs.enabled=true
#springdoc.swagger-ui.enabled=true

#spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# run multiple instances - gradle - > tasks -> bootjar/ package for maven. It is in build->libs
# run command -> java -jar -Dserver.port={port} build/libs/{name.jar}

spring.config.import=optional:configserver:http://localhost:8888

# Spring Cloud Bus
# in cmd: docker run --rm -it -p 5672:5672 rabbitmq:3.12.12
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
logging.level.org.springframework.web=DEBUG
# zipkin as a docker container: docker run --rm -it --name zipkin -p 9411:9411 openzipkin/zipkin